import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { scanResult, format } = await request.json()

    if (!scanResult || !format) {
      return NextResponse.json({ error: "Missing required parameters" }, { status: 400 })
    }

    let content: string
    let contentType: string

    if (format === "json") {
      content = JSON.stringify(scanResult, null, 2)
      contentType = "application/json"
    } else if (format === "txt") {
      content = `DhaViPa Security Scan Report
Generated: ${new Date().toISOString()}
Target: ${scanResult.ip}

${scanResult.summary}

=== DETAILED INFORMATION ===

IP Address: ${scanResult.ip}
Risk Level: ${scanResult.riskLevel}

Hostnames:
${scanResult.hostnames.length > 0 ? scanResult.hostnames.map((h: string) => `- ${h}`).join("\n") : "- None detected"}

Open Ports:
${scanResult.ports.length > 0 ? scanResult.ports.map((p: number) => `- ${p}`).join("\n") : "- None detected"}

Vulnerabilities (CVEs - Common Vulnerabilities and Exposures):
${
  scanResult.vulns.length > 0
    ? `⚠️ CRITICAL: ${scanResult.vulns.length} security vulnerabilities found!\n` +
      `Each CVE below represents a known security flaw that could be exploited:\n\n` +
      scanResult.vulns.map((v: string, i: number) => `${i + 1}. ${v} - Known security vulnerability`).join("\n")
    : "✅ No known vulnerabilities detected"
}

CPE Information:
${scanResult.cpes.length > 0 ? scanResult.cpes.map((c: string) => `- ${c}`).join("\n") : "- None detected"}

Tags:
${scanResult.tags.length > 0 ? scanResult.tags.map((t: string) => `- ${t}`).join("\n") : "- None detected"}

=== RECOMMENDATIONS ===

Based on the scan results, consider the following security measures:

1. Review and close unnecessary open ports
2. Apply security patches for identified vulnerabilities
3. Implement network segmentation and access controls
4. Monitor for suspicious activities
5. Regular security assessments and updates

Report generated by DhaViPa - Dynamic Host & Vulnerability Intelligence Partner`

      contentType = "text/plain"
    } else {
      return NextResponse.json({ error: "Invalid format" }, { status: 400 })
    }

    return new NextResponse(content, {
      headers: {
        "Content-Type": contentType,
        "Content-Disposition": `attachment; filename="dhavipa-scan-${scanResult.ip}.${format}"`,
      },
    })
  } catch (error) {
    console.error("Download error:", error)
    return NextResponse.json({ error: "Download failed" }, { status: 500 })
  }
}
